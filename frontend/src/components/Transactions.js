import React, { useState } from "react";

function Transactions() {
  const [name, setName] = useState("");
  const [userId, setUserId] = useState("");
  const [bookId, setBookId] = useState("");
  const [issueDate, setIssueDate] = useState("");
  const [returnDate, setReturnDate] = useState("");
  const [transactionResult, setTransactionResult] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [rentUserId, setRentUserId] = useState(""); // For Total Rent User ID
  const [bookUserId, setBookUserId] = useState(""); // For Books Issued User ID

  // Issue a book
  const handleIssue = () => {
    fetch("api/transactions/issue", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name, userId, bookId, issueDate }),
    })
      .then((res) => res.json())
      .then((data) => setTransactionResult(data));
  };

  // Return a book
  const handleReturn = () => {
    fetch("api/transactions/return", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name, userId, bookId, returnDate }),
    })
      .then((res) => res.json())
      .then((data) => setTransactionResult(data));
  };

  // Search book transactions by book name
  const searchBookTransactions = () => {
    fetch(`api/transactions/book?bookName=${searchTerm}`)
      .then((res) => res.json())
      .then((data) => setTransactionResult(data));
  };

  // Get total rent generated by user
  const getBookRent = () => {
    fetch(`api/transactions/rent/${bookId}`)
      .then((res) => res.json())
      .then((data) => setTransactionResult(data));
  };

  // Get books issued by user
  const getBooksByUser = () => {
    fetch(`api/transactions/user?userId=${bookUserId}`)
      .then((res) => res.json())
      .then((data) => setTransactionResult(data));
  };

  // Get books issued in date range
  const getBooksByDateRange = () => {
    fetch(
      `api/transactions/daterange?startDate=${startDate}&endDate=${endDate}`
    )
      .then((res) => res.json())
      .then((data) => setTransactionResult(data));
  };

  return (
    <div>
      <div className="flex space-y-4">
        {/* Issue/Return Section */}
        <div className="w-1/3 flex flex-col justify-center bg-red-100 p-6 m-2 rounded-3xl">
          <h3 className="text-4xl font-bold mb-6">Create Transactions</h3>
          <div className="bg-pink-300 flex flex-col justify-center item-center">
            <div className="pt-4 pl-4 pr-4">
              <label className="block">Book Name:</label>
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="border p-2 w-full"
              />
            </div>
            <div className="pt-4 pl-4 pr-4">
              <label className="block">Book ID:</label>
              <input
                type="text"
                value={bookId}
                onChange={(e) => setBookId(e.target.value)}
                className="border p-2 w-full"
              />
            </div>
            <div className="pt-4 pl-4 pr-4">
              <label className="block">User ID:</label>
              <input
                type="text"
                value={userId}
                onChange={(e) => setUserId(e.target.value)}
                className="border p-2 w-full"
              />
            </div>
            <div className="pt-4 pl-4 pr-4">
              <label className="block">Issue Date:</label>
              <input
                type="date"
                value={issueDate}
                onChange={(e) => setIssueDate(e.target.value)}
                className="border p-2 w-full"
              />
            </div>
            <div className="pt-4 pl-4 pr-4">
              <label className="block">Return Date:</label>
              <input
                type="date"
                value={returnDate}
                onChange={(e) => setReturnDate(e.target.value)}
                className="border p-2 w-full"
              />
            </div>
            <button
              onClick={handleIssue}
              className="bg-blue-500 text-white p-2 mt-4 mr-10 ml-10 rounded-2xl"
            >
              Issue Book
            </button>
            <button
              onClick={handleReturn}
              className="bg-red-500 text-white p-2 mr-10 ml-10 mt-2 mb-4 rounded-2xl"
            >
              Return Book
            </button>
          </div>

          <h3 className="text-4xl font-bold mt-6">Search Transactions</h3>
          {/* Search Book Transactions by Book Name */}
          <div className="bg-pink-300 mt-4 p-4">
            <label className="block">Search by Book Name:</label>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="border p-2 w-full"
            />
            <button
              onClick={searchBookTransactions}
              className="bg-green-500 text-white p-2 mt-2 rounded-2xl"
            >
              Search Transactions
            </button>
          </div>

          {/* Get Total Rent Generated by User */}
          <div className="bg-pink-300 mt-4 p-4">
            <h3 className="text-xl font-bold mt-6">Total Rent</h3>
            <label className="block">Book ID:</label>
            <input
              type="text"
              value={bookId}
              onChange={(e) => setBookId(e.target.value)}
              className="border p-2 w-full"
            />
            <button
              onClick={getBookRent}
              className="bg-purple-500 text-white p-2 rounded-2xl mt-2"
            >
              Get Total Rent for User
            </button>
          </div>

          {/* Get Books Issued by User */}
          <div className="bg-pink-300 mt-4 p-4">
            <h3 className="text-xl font-bold mt-6">Books Issued by User</h3>
            <label className="block">User ID:</label>
            <input
              type="text"
              value={bookUserId}
              onChange={(e) => setBookUserId(e.target.value)}
              className="border p-2 w-full"
            />
            <button
              onClick={getBooksByUser}
              className="bg-yellow-500 text-white p-2 rounded-2xl mt-2"
            >
              Get Books for User
            </button>
          </div>

          {/* Get Books Issued in Date Range */}
          <div className="bg-pink-300 mt-4 p-4">
            <h3 className="text-xl font-bold mt-6">Books Issued in Date Range</h3>
            <label className="block">Start Date:</label>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="border p-2 w-full"
            />
            <label className="block">End Date:</label>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="border p-2 w-full"
            />
            <button
              onClick={getBooksByDateRange}
              className="bg-indigo-500 text-white p-2 mt-2 rounded-2xl"
            >
              Get Books by Date Range
            </button>
          </div>
        </div>

        <div className="w-2/3 bg-slate-400 p-6 text-white text-xl rounded-3xl m-2">
          <h2 className="text-2xl font-bold mb-4">Manage Transactions</h2>
          {transactionResult && (
            <div className="border p-4 rounded-lg bg-white text-black">
              <pre>{JSON.stringify(transactionResult, null, 2)}</pre>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default Transactions;
